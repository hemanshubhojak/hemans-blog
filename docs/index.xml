<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heman&#39;s blog</title>
    <link>https://hemans.blog/</link>
    <description>Recent content on heman&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jul 2020 17:35:45 +1000</lastBuildDate>
    
	<atom:link href="https://hemans.blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Art of Making Electrons Work</title>
      <link>https://hemans.blog/posts/2020/art-of-making-electrons-work/</link>
      <pubDate>Thu, 23 Jul 2020 17:35:45 +1000</pubDate>
      
      <guid>https://hemans.blog/posts/2020/art-of-making-electrons-work/</guid>
      <description>The AtomAll matter in the universe is made up of tiny particles. Some particles are positive and some are negative. These particles are constantly jiggling around. When like particles come closer they repel each other with a great force, called the electric force. But the opposite particles attract each other. However an evenly mixed bunch of these particles will pull each other with great attraction and balance each other out.</description>
    </item>
    
    <item>
      <title>Markdown test</title>
      <link>https://hemans.blog/posts/2020/marodown-test/</link>
      <pubDate>Thu, 23 Jul 2020 17:35:45 +1000</pubDate>
      
      <guid>https://hemans.blog/posts/2020/marodown-test/</guid>
      <description>Advertisement :)
 pica - high quality and fast image resize in browser. babelfish - developer friendly i18n with plurals support and easy syntax.  You will like those projects!
 h1 Heading 8-)h2 Headingh3 Headingh4 Headingh5 Headingh6 HeadingHorizontal Rules   Typographic replacementsEnable typographer option to see result.
(c) (C) (r) (R) (tm) (TM) (p) (P) +-
test.. test&amp;hellip; test&amp;hellip;.. test?&amp;hellip;.. test!&amp;hellip;.
!!!!!! ???? ,, &amp;ndash; &amp;mdash;
&amp;ldquo;Smartypants, double quotes&amp;rdquo; and &amp;lsquo;single quotes&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Git: Import git repository</title>
      <link>https://hemans.blog/posts/2018/2018-11-22-import-git-repo/</link>
      <pubDate>Thu, 22 Nov 2018 00:17:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-11-22-import-git-repo/</guid>
      <description>git clone --bare https://source-domain.com/source-repo.git git push --mirror https://destination-domain.com/destination-repo.git </description>
    </item>
    
    <item>
      <title>Git: Purge local branches missing on remote (Powershell)</title>
      <link>https://hemans.blog/posts/2018/2018-10-04-git-purge-local-branches-missing-on-remote-powershell/</link>
      <pubDate>Thu, 04 Oct 2018 04:13:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-10-04-git-purge-local-branches-missing-on-remote-powershell/</guid>
      <description>git remote prune origin | git branch -vv | Select-String -Pattern &amp;#34;\[origin/(.*?): gone\]&amp;#34; | %{git branch -d $($_.matches.groups[1].value)} </description>
    </item>
    
    <item>
      <title>Custom Domain in Asp.Net Core Kestrel</title>
      <link>https://hemans.blog/posts/2018/2018-07-26-custom-domain-in-asp.net-core-kestrel/</link>
      <pubDate>Thu, 26 Jul 2018 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-07-26-custom-domain-in-asp.net-core-kestrel/</guid>
      <description>Update hosts fileThis file is usually located at %SYSTEMROOT%\System32\drivers\etc\hosts
%SYSTEMROOT% is usually C:\Windows
Add the following line at the end of that file
127.0.0.1 hemanshubhojak.com You need to have administrator rights to modify this file. Also run notepad or your text editor as administrator to save the file.
Run the following command to flush the local DNS cache.
$&amp;gt; ipconfig /flushdns Windows IP Configuration Successfully flushed the DNS Resolver Cache. Test hosts file changesRun the following command to test the above changes.</description>
    </item>
    
    <item>
      <title>Git: Clean untracked files and directories</title>
      <link>https://hemans.blog/posts/2018/2018-05-18-git-clean-untracked-files-and-directories/</link>
      <pubDate>Fri, 18 May 2018 11:50:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-05-18-git-clean-untracked-files-and-directories/</guid>
      <description>After a git pull I often have empty directories if files are moved around or deleted.
The following commit will clean all untracked files and directories.
git clean -fd </description>
    </item>
    
    <item>
      <title>Git: Undo a commit</title>
      <link>https://hemans.blog/posts/2018/2018-05-18-git-undo-commit/</link>
      <pubDate>Fri, 18 May 2018 11:47:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-05-18-git-undo-commit/</guid>
      <description>git reset --hard HEAD~number_of_last_commits Or
git reset --hard commit_id If the commits are on the server
git push --force </description>
    </item>
    
    <item>
      <title>Git: Purge local branches missing on remote</title>
      <link>https://hemans.blog/posts/2018/2018-05-07-git-purge-local-branches-missing-on-remote/</link>
      <pubDate>Mon, 07 May 2018 12:20:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2018-05-07-git-purge-local-branches-missing-on-remote/</guid>
      <description>Prune tracking branches not on remote
git remote prune origin List all local branches with upstream branch
git branch -vv Filter the branches with missing upstream
git branch -vv | grep &amp;#39;: gone]&amp;#39; Extract the branch names
git branch -vv | grep &amp;#39;: gone]&amp;#39; | awk &amp;#39;{print $1}&amp;#39; Delete the extracted branches
git branch -vv | grep &amp;#39;: gone]&amp;#39; | awk &amp;#39;{print $1}&amp;#39; | xargs git branch -d (Optional) Create an alias in bash</description>
    </item>
    
    <item>
      <title>Maths: Why is 0! = 1?</title>
      <link>https://hemans.blog/posts/2018/2016-08-01-why-is-0-factorial-1/</link>
      <pubDate>Fri, 09 Mar 2018 10:31:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2016-08-01-why-is-0-factorial-1/</guid>
      <description>Let&amp;rsquo;s find factorial of numbers from 0 to 4
0! = 1 1! = 1 (1) 2! = 2 (1 * 2) 3! = 6 (1 * 2 * 3) 4! = 24 (1 * 2 * 3 * 4) Let&amp;rsquo;s go reverse
4! = 24 (1 * 2 * 3 * 4) 3! = 24/4 = 6 2! = 6/3 = 2 1! = 2/2 = 1 0! = 1/1 = 1 &amp;lt;- This is why </description>
    </item>
    
    <item>
      <title>Maths: Why is a^0=1?</title>
      <link>https://hemans.blog/posts/2018/2016-08-01-why-is-a-to-the-power-0-equals-1/</link>
      <pubDate>Fri, 09 Mar 2018 10:31:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2018/2016-08-01-why-is-a-to-the-power-0-equals-1/</guid>
      <description>Let&amp;rsquo;s find powers of 2
2^-3 = 1/8 2^-2 = 2 * 1/8 = 1/4 2^-1 = 2 * 1/4 = 1/2 2^0 = 2 * 1/2 = 1 &amp;lt;- This is why 2^1 = 2 * 1 = 2 2^2 = 2 * 2 = 4 2^3 = 2 * 4 = 8 In the above example we multiply by 2 as we move down.
Let&amp;rsquo;s do that in reverse</description>
    </item>
    
    <item>
      <title>Git: Revert a file to a previous version</title>
      <link>https://hemans.blog/posts/2016/2016-08-01-git-revert-file-to-previous-version/</link>
      <pubDate>Mon, 01 Aug 2016 22:53:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-08-01-git-revert-file-to-previous-version/</guid>
      <description>Using commit hash
git log &amp;#34;some-folder/some-file.txt&amp;#34; #get the SHA commit hash git checkout &amp;lt;commit-hash&amp;gt; &amp;#34;some-folder/some-file.txt&amp;#34; Using the HEAD
git checkout HEAD~1 &amp;#34;some-folder/some-file.txt&amp;#34; </description>
    </item>
    
    <item>
      <title>Git: Create a remote branch</title>
      <link>https://hemans.blog/posts/2016/2016-07-20-git-create-a-remote-branch/</link>
      <pubDate>Wed, 20 Jul 2016 11:06:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-07-20-git-create-a-remote-branch/</guid>
      <description>Create a local branch
git checkout -b feature/somefeature Push the local branch to the remote server and optionally set upstream with -u so that the subsequent git pull will know what to do.
git push -u origin feature/somefeature </description>
    </item>
    
    <item>
      <title>Angular2: TypeError: Cannot read property &#39;visitStatement&#39; of undefined</title>
      <link>https://hemans.blog/posts/2016/2016-07-04-angular2-cannot-read-property-visitstatement-of-undefined/</link>
      <pubDate>Mon, 04 Jul 2016 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-07-04-angular2-cannot-read-property-visitstatement-of-undefined/</guid>
      <description>If you get the following runtime error in your Angular2 app,
TypeError: Cannot read property ‘visitStatement’ of undefined Remove any empty event handlers like,
(click)=&amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>How to keep your feature branch in sync with your develop branch</title>
      <link>https://hemans.blog/posts/2016/2016-06-09-keeping-feature-branch-insync-with-develop/</link>
      <pubDate>Thu, 09 Jun 2016 06:12:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-06-09-keeping-feature-branch-insync-with-develop/</guid>
      <description>While using GitFlow, it is a good practice to keep your feature branch in sync with the develop branch to make merging easy.
I do the following to keep my feature branch in sync with develop.
git checkout develop #if you don&amp;#39;t have it already git checkout feature/x #if you don&amp;#39;t have it already git pull --all git merge develop You can also do a rebase instead of merge.</description>
    </item>
    
    <item>
      <title>Universal Desktop Apps using Web technologies</title>
      <link>https://hemans.blog/posts/2016/2016-05-17-universal-desktop-app-using-web-technologies/</link>
      <pubDate>Tue, 17 May 2016 03:44:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-05-17-universal-desktop-app-using-web-technologies/</guid>
      <description>Electron is a framework for creating native desktop applications using web technologies like HTML, CSS and JavaScript.
A lot of popular desktop applications are built using GitHub&amp;rsquo;s Electron, like Visual Studio Code, Slack, Atom, etc.
Electron apps are like NodeJS applications bundled with a minimal Chromium browser and uses web pages for UI.
Let&amp;rsquo;s see how we can quickly setup our environment and build a &amp;ldquo;Hello World&amp;rdquo; electron app.
Application structureElectron apps are generally structured like this,</description>
    </item>
    
    <item>
      <title>Simple Docker container running a http server</title>
      <link>https://hemans.blog/posts/2016/2016-05-12-simple-docker-container-running-http-server/</link>
      <pubDate>Thu, 12 May 2016 09:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-05-12-simple-docker-container-running-http-server/</guid>
      <description>In this exercise we will create a Docker container which will run a simple http server.
Before starting, setup Docker on your local machine. You can easily setup Docker on your Windows machine using Chocolatey.
Creating a DockerfileWe will create the Docker container using a Dockerfile. A Dockerfile contains a set of instructions to tell docker how to create and configure the container.
Create a directory with the name docker-playground.</description>
    </item>
    
    <item>
      <title>Setting up Docker on Windows using Chocolatey</title>
      <link>https://hemans.blog/posts/2016/2016-05-11-settingup-docker-windows-chocolatey/</link>
      <pubDate>Wed, 11 May 2016 08:31:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-05-11-settingup-docker-windows-chocolatey/</guid>
      <description>Installing ChocolateyChocolatey is an awesome package manager for Windows (like apt-get) which makes installing software a breeze.
Run the following command to download and install Chocolatey.
C:\&amp;gt; @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;#34;iex ((new-object net.webclient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;#34; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin Verify that we have successfully installed Chocolatey.
C:\&amp;gt; choco -v Installing Docker ComponentsWe will need the following components in order to create and host Docker containers on our local machine.
 VirtualBox Docker Client Docker Machine Docker Compose  Virtual BoxDocker uses virtual machines to host and run containers.</description>
    </item>
    
    <item>
      <title>Chocolatey: A package manager for Windows</title>
      <link>https://hemans.blog/posts/2016/2016-05-11-chocolatey-a-package-manager-for-windows/</link>
      <pubDate>Wed, 11 May 2016 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-05-11-chocolatey-a-package-manager-for-windows/</guid>
      <description>Chocolatey is an awesome package manager for Windows (based on NuGet) which I have been using since a couple of years now. Every developer and hacker should have it on their Windows machines.
A package manager is a tool which makes it easy to install, configure and update a software from the command line.
Chocolatey is like apt-get on Linux or homebrew on Mac.
Installing and updating software is a breeze with Chocolatey using very simple commands.</description>
    </item>
    
    <item>
      <title>SOLID Principles</title>
      <link>https://hemans.blog/posts/2016/2016-05-09-solid-principles/</link>
      <pubDate>Mon, 09 May 2016 13:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2016/2016-05-09-solid-principles/</guid>
      <description>(S) Single Responsibility Principle A class should have only one reason to change
 (O) Open and Closed Principle Classes should be open for extension but closed for modification
 (L) Liskov Substitution Principle Derived classes should be substitutable for their base classes
 (I) Interface Segregation Principle Client&amp;rsquo;s should not be forced to implement an interface they don&amp;rsquo;t use
 (D) Dependency Inversion Principle Program to an interface not an implementation</description>
    </item>
    
    <item>
      <title>Advent of Mobile Web Apps</title>
      <link>https://hemans.blog/posts/2015/2015-11-30-advent-of-mobile-web-apps/</link>
      <pubDate>Wed, 02 Dec 2015 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2015/2015-11-30-advent-of-mobile-web-apps/</guid>
      <description>Pros and Cons of Native and Web Applications Native Apps  Pros  Has access to almost all device capabilities (GPS, Serial Communication, Camera, etc.) Easy to find apps from the app store Performance is good Supports push notifications Multi threaded   Cons  Needs an install Ensuring everyone is using the latest version is a pain Consumes more space on the disk as compared to a web app Is regulated by the provider (Google, Apple, etc.</description>
    </item>
    
    <item>
      <title>Keep your Entity Framework entities clean with EntityTypeConfiguration</title>
      <link>https://hemans.blog/posts/2015/2015-12-01-clean-entities-using-entity-type-configuration/</link>
      <pubDate>Tue, 01 Dec 2015 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2015/2015-12-01-clean-entities-using-entity-type-configuration/</guid>
      <description>What? Entity Framework has two ways of mapping an entity class to a database table  Attributes  Pollutes the classes Avoid using this approach   EntityTypeConfiguration  Unobtrusive way of mapping Always use this approach      How? Steps  Create a mapping class for every entity  Inherit from the EntityTypeConfiguration class Configure mapping in the constructor   Add all the mapping classes to the DbContext    Entity</description>
    </item>
    
    <item>
      <title>Pomodoro</title>
      <link>https://hemans.blog/posts/2015/2015-11-30-pomodoro/</link>
      <pubDate>Mon, 30 Nov 2015 01:00:00 +0000</pubDate>
      
      <guid>https://hemans.blog/posts/2015/2015-11-30-pomodoro/</guid>
      <description>What? Pomodoro is a time management technique Pomodoro is Italian for tomato  How? Pomodoro is a unit of work  One Pomodoro is equal to 25 minutes   Remove all distractions Start the Pomodoro  You can use a kicten timer, stop watch or a mobile app to keep track of the time   Focus and work on the task for one Pomodoro  Immerse yourself in the task   After every Pomodoro take a 5 minute break After every 4 Pomodors take a 30 minute break During the break  Surf the internet, facebook, chat, eat, etc This refreshes the mind and prepares us for the next Pomodoro   Abandon the Pomodoro if you get distracted and start over  Why?</description>
    </item>
    
  </channel>
</rss>